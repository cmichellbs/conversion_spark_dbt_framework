{{config({
        "materialized": 'table',
        "post-hook": ["{{ create_nonclustered_index(columns = ['ID_FATURA',], ) }}" ]})}}

WITH fatura as (
SELECT
row_number() over(order by fat.GBIINVOICE asc) as ID_FATURA,
CASE WHEN DENSE_RANK()  over(partition by uc.CH_MATRICULA_UNIDADE order by fat.DT_MESANO_REF desc) = 1
AND row_number() OVER(PARTITION BY uc.CH_MATRICULA_UNIDADE,fat.DT_MESANO_REF order by fat.DT_MESANO_REF, fat.GBIINVOICE) > 1
AND row_number() OVER(PARTITION BY uc.CH_MATRICULA_UNIDADE,fat.DT_MESANO_REF order by fat.DT_MESANO_REF, fat.GBIINVOICE DESC) = 1 
AND ssf.status not in (3,7)
THEN DATEADD(month,1,fat.DT_MESANO_REF)  

ELSE fat.DT_MESANO_REF END as DT_MESANO_REF,
cast(cast(case
    when fat.GBIDUE_DATE is null then dateadd(day,28,fat.GBIDATE)
    else fat.GBIDUE_DATE
end as datetime) as date) as DT_VENCIMENTO_FATURA,
cast(cast(case when reg.GBIMCONSUMP <0 then reg.GBIMCONSUMP * 1 else reg.GBIMCONSUMP end as float) as varchar)  as QT_VOLUME_FATURADO_FATURA,
cast(cast(fat.GBIDATE as date) as varchar) as DT_SITUACAO_FATURA,
cast(cast(fat.GBIDATE as date) as varchar) as DT_EMISSAO_FATURA,
coalesce(c.VL_AGUA_CPTE_FATURA,0) as VL_TOTAL_AGUA,
coalesce(c.VL_ESGOTO_CPTE_FATURA,0) as VL_TOTAL_ESGOTO, 
coalesce(CASE WHEN FSU.VL_TOTAL_SERVICO <0 THEN FSU.VL_TOTAL_SERVICO * 1 ELSE FSU.VL_TOTAL_SERVICO END,0) as VL_TOTAL_SERVICOS,
0 as VL_TOTAL_DESCONTOS,
0 as VL_TOTAL_OUTORGA,
0 as VL_TOTAL_OUTORGA_ESGOTO,
-- CASE WHEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) < 0 THEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) * -1 ELSE COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) END as VL_TOTAL_FATURA,
-- CASE WHEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) < 0 THEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) * -1 ELSE COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) END as VL_BASE_JUROS_MULTA,
SFSP.DPAID as VL_PAGO,

'S' as FL_COBRAR_MULTA_ATRASO,
null as FL_COBRAR_JUROS_ATRASO,
null as FL_COBRAR_CORRECAO_ATRASO,
null as FL_SITUACAO_FECHAMENTO_MENSAL_FATURA,
COALESCE(reg.GBIMSERIAL,HIST.SERIAL) as HIST_NR_HIDROMETRO,
7 as HIST_NR_DIGITOS_HIDROMETRO,
uc.NR_LOCALIZACAO_UNIDADE as HIST_NR_LOCALIZACAO,
cast(AVG(CASE WHEN reg.GBIMCONSUMP < 0 THEN reg.GBIMCONSUMP * 1 ELSE reg.GBIMCONSUMP END) OVER(PARTITION BY fat.GBIINSTALL order by fat.GBIINVOICE desc) as integer)  as HIST_CONSUMO_MEDIO,
case 
    when fat.GBIREAD_TODATE >= CAST('1990-01-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('1999-12-31 00:00:00.000' AS DATE)then 1
    when fat.GBIREAD_TODATE >= CAST('2000-01-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2010-09-30 00:00:00.000' AS DATE) then 2
    when fat.GBIREAD_TODATE >= CAST('2010-10-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2011-06-30 00:00:00.000' AS DATE) then 3
    when fat.GBIREAD_TODATE >= CAST('2011-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2012-06-30 00:00:00.000' AS DATE) then 4
    when fat.GBIREAD_TODATE >= CAST('2012-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2013-06-30 00:00:00.000' AS DATE) then 5
    when fat.GBIREAD_TODATE >= CAST('2013-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2014-06-30 00:00:00.000' AS DATE) then 6
    when fat.GBIREAD_TODATE >= CAST('2014-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2015-06-30 00:00:00.000' AS DATE) then 7
    when fat.GBIREAD_TODATE >= CAST('2015-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2016-06-30 00:00:00.000' AS DATE)then 8
    when fat.GBIREAD_TODATE >= CAST('2016-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2017-06-30 00:00:00.000' AS DATE) then 9
    when fat.GBIREAD_TODATE >= CAST('2017-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2018-06-30 00:00:00.000' AS DATE) then 10
    when fat.GBIREAD_TODATE >= CAST('2018-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2019-06-30 00:00:00.000' AS DATE) then 11
    when fat.GBIREAD_TODATE >= CAST('2019-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2020-06-30 00:00:00.000' AS DATE) then 12
    when fat.GBIREAD_TODATE >= CAST('2020-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2021-06-30 00:00:00.000' AS DATE) then 13
    when fat.GBIREAD_TODATE >= CAST('2021-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2022-06-30 00:00:00.000' AS DATE) then 14
    when fat.GBIREAD_TODATE >= CAST('2022-07-01 00:00:00.000' AS DATE) AND fat.GBIREAD_TODATE <=  CAST('2023-06-30 00:00:00.000' AS DATE) then 15

    else 1
end as HIST_COD_TABELA_TARIFARIA,
cast(cast(case
    when fat.GBIDUE_DATE is null then dateadd(month,1,fat.GBIDATE)
    else fat.GBIDUE_DATE
end  as date) as date) as HIST_DT_VENCIMENTO_FATURA,
1 as HIST_COD_TIPO_FATURA,
1 as HIST_COD_TIPO_COBRANCA,
CASE WHEN gastos.HIST_FL_COBRAR_AGUA = 1 THEN 'S' ELSE 'N' END as HIST_FL_COBRAR_AGUA,
CASE WHEN gastos.HIST_FL_COBRAR_ESGOTO = 1 THEN 'S' ELSE 'N' END as HIST_FL_COBRAR_ESGOTO,
1 as HIST_COD_CATEGORIA_PRINCIPAL,
-- COALESCE(case when reg.GBIMCURR_READ < 0 then reg.GBIMCURR_READ * 1 else reg.GBIMCURR_READ end,HIST.GBR$CREAD) 
coalesce(
    CASE 
    WHEN CAST(reg.GBIMCURR_READ AS INTEGER) <> cast(LAG(reg.GBIMPREV_READ,1,GBIMPREV_READ)OVER (partition by reg.GBIMINSTALL order by reg.GBIINVOICE desc) as integer)  and 
    row_number() OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE desc) <> 1   THEN 
    LAG(reg.GBIMPREV_READ,1,GBIMPREV_READ)OVER (partition by reg.GBIMINSTALL order by reg.GBIINVOICE desc) 
    else reg.GBIMCURR_READ end
    ,HIST.GBR$CREAD
    ) 
    as HIST_NR_LEITURA_ATUAL,
-- coalesce(reg.GBIMPREV_READ,HIST.GBR$PREAD)
coalesce(CASE 
    WHEN CAST(reg.GBIMPREV_READ AS INTEGER) <> cast(LAG(reg.GBIMCURR_READ,1,GBIMPREV_READ)OVER (partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) as integer)  and 
    row_number() OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) <> 1   THEN 
    LAG(reg.GBIMCURR_READ,1,GBIMCURR_READ)OVER (partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) 
    else reg.GBIMPREV_READ end,HIST.GBR$PREAD) 
as HIST_NR_LEITURA_ANTERIOR,


cast(cast(cast(CASE 
    WHEN CAST(reg.GBIMPREV_READ AS INTEGER) <> cast(LAG(reg.GBIMCURR_READ,1,GBIMCURR_READ) OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) as integer) and 
    row_number() OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) <> 1  THEN 
    (cast(LAG(reg.GBIMCURR_READ,1,GBIMCURR_READ) OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) as integer) -cast(LAG(reg.GBIMPREV_READ,1,GBIMPREV_READ) OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) as integer)) 
    else 0 end as integer) as integer) as varchar) as HIST_QT_SALDO_CONSUMO,
-- COALESCE(cast(cast(CASE WHEN DATEPART(HOUR,reg.GBIMPREV_DATE) = 23 THEN  DATEADD(HOUR,1,reg.GBIMPREV_DATE) 
--             when DATEPART(HOUR,reg.GBIMPREV_DATE) = 13 THEN  DATEADD(HOUR,11,reg.GBIMPREV_DATE)
--             when DATEPART(HOUR,reg.GBIMPREV_DATE) = 12 THEN  DATEADD(HOUR,12,reg.GBIMPREV_DATE) 
--             when DATEPART(HOUR,reg.GBIMPREV_DATE) = 11 THEN  DATEADD(HOUR,13,reg.GBIMPREV_DATE) 
-- ELSE reg.GBIMPREV_DATE END as date) as varchar),

-- cast(cast(CASE WHEN DATEPART(HOUR,HIST.GBR$PDATE) = 23 THEN  DATEADD(HOUR,1,HIST.GBR$PDATE) 
--             when DATEPART(HOUR,HIST.GBR$PDATE) = 13 THEN  DATEADD(HOUR,11,HIST.GBR$PDATE)
--             when DATEPART(HOUR,HIST.GBR$PDATE) = 12 THEN  DATEADD(HOUR,12,HIST.GBR$PDATE) 
--             when DATEPART(HOUR,HIST.GBR$PDATE) = 11 THEN  DATEADD(HOUR,13,HIST.GBR$PDATE) 
-- ELSE HIST.GBR$PDATE END as date) as varchar)) 
coalesce(CASE 
    WHEN CAST(reg.GBIMPREV_READ AS INTEGER) <> cast(LAG(reg.GBIMCURR_READ,1,GBIMPREV_READ)OVER (partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) as integer)  and 
    row_number() OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) <> 1   THEN 
    LAG(reg.GBIMCURR_DATE,1,GBIMCURR_DATE) OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) 
    else reg.GBIMPREV_DATE end,HIST.GBR$PDATE)
as HIST_DATA_LEITURA_ANTERIOR_TEMP,

COALESCE(cast(cast(CASE WHEN DATEPART(HOUR,reg.GBIMCURR_DATE) = 23 THEN  DATEADD(HOUR,1,reg.GBIMCURR_DATE) 
            when DATEPART(HOUR,reg.GBIMCURR_DATE) = 13 THEN  DATEADD(HOUR,11,reg.GBIMCURR_DATE) 
            when DATEPART(HOUR,reg.GBIMCURR_DATE) = 12 THEN  DATEADD(HOUR,12,reg.GBIMCURR_DATE) 
            when DATEPART(HOUR,reg.GBIMCURR_DATE) = 11 THEN  DATEADD(HOUR,13,reg.GBIMCURR_DATE) 
ELSE reg.GBIMCURR_DATE END as date) as date),

cast(cast(CASE WHEN DATEPART(HOUR,HIST.GBR$CDATE) = 23 THEN  DATEADD(HOUR,1,HIST.GBR$CDATE) 
            when DATEPART(HOUR,HIST.GBR$CDATE) = 13 THEN  DATEADD(HOUR,11,HIST.GBR$CDATE) 
            when DATEPART(HOUR,HIST.GBR$CDATE) = 12 THEN  DATEADD(HOUR,12,HIST.GBR$CDATE) 
            when DATEPART(HOUR,HIST.GBR$CDATE) = 11 THEN  DATEADD(HOUR,13,HIST.GBR$CDATE) 
ELSE HIST.GBR$CDATE END as date) as date)) as HIST_DATA_LEITURA_ATUAL_TEMP,
NULL as HIST_DADOS_BANCARIOS_DEBITO_CONTA,
CUOC.ID_ORGAO_CENTRALIZADOR as HIST_ID_ORGAO_CENTRALIZADOR,
NULL as HIST_ID_OCORRENCIA_LEITURA,
la.CH_SITUACAO_LIGACAO_AGUA as HIST_CH_SITUACAO_LIGACAO_AGUA,
CASE
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'AB' then 8
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'AE' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'BR' then 7
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'CR' then 2
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'E1' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'E2' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'E3' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'EM' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'GE' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'GR' then 2
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'IM' then 2
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'ME' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'MR' then 4
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'NM' then 8
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'OR' then 2
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'RD' then 1
WHEN CONSUMO_HIST.GBIMCURR_TYPE_ADJ = 'RM' then 2
ELSE 8

END as HIST_CH_TIPO_CONSUMO_FATURADO,
loc.ID_LOCALIZACAO as HIST_ID_LOCALIZACAO_UNIDADE,
COALESCE(cast(case when reg.GBIMCONSUMP < 0 then reg.GBIMCONSUMP * 1 else reg.GBIMCONSUMP end as integer), HIST.GBR$RCONSUMP) as HIST_CONSUMO_REAL,
cast(0 as BIT) as HIST_FL_ESGOTO_TRATADO,
case when gastos.VL_TOTAL_IMPOSTO < 0 then gastos.VL_TOTAL_IMPOSTO * 1 else gastos.VL_TOTAL_IMPOSTO END as VL_TOTAL_IMPOSTO,
'N' as HIST_POSSUI_ISENCAO_TARIFA_AGUA,
'N' as HIST_POSSUI_ISENCAO_TARIFA_ESGOTO,
NULL as HIST_POSSUI_ISENCAO_TARIFA_SERVICO,
AP.ID_PAGAMENTO as ID_PAGAMENTO,
null as FL_DESCONTO,
null as FL_PARCELAMENTO,
null as FL_FATURA_PDD,
cast(cast(fat.GBIDATE  as date) as date) as DT_GRAVACAO_FATURA,
null as FL_SITUACAO_SPC,
null as FL_SITUACAO_SERASA,
null as FL_CONTABILIZADA,
null as FL_DIVIDA_ATIVA,
null as FL_PERMITE_INCLUSAO_SPC,
cast(cast(fat.GBIDATE  as date) as date) as DT_IMPRESSAO_FATURA,
fat.GBIINVOICE as NR_FATURA,
0 as VL_REPASSE_ESGOTO_TERCEIRO,
0 as QT_PESO_LIGACAO_PARTICULAR,
-- CASE 
-- WHEN (AP.ID_PAGAMENTO IS NOT NULL AND S.CH_SITUACAO_FATURA <>3 ) THEN 2
-- WHEN (SFSP.STATUS_PAGO = 1 AND S.CH_SITUACAO_FATURA <>3) THEN 2
-- when (P.VL_SALDO_ATUAL <= 0
--  AND ROW_NUMBER() OVER(PARTITION BY uc.CH_MATRICULA_UNIDADE order by fat.GBIINVOICE DESC) > 1 
--  and S.CH_SITUACAO_FATURA not in  (3,2)) 
--  then 2
-- else S.CH_SITUACAO_FATURA 
-- END as CH_SITUACAO_FATURA,
ssf.status as CH_SITUACAO_FATURA ,
case 
    when  uc.CH_MATRICULA_UNIDADE IN (SELECT CH_MATRICULA_UNIDADE FROM {{ref('fat_debito_conta')}}) THEN 1 
    ELSE 2
end as CH_TIPO_COBRANCA,
1 as CH_MOTIVO_EMISSAO_FATURA,
CASE WHEN DENSE_RANK() over(partition by uc.CH_MATRICULA_UNIDADE order by fat.DT_MESANO_REF desc) = 1
AND row_number() OVER(PARTITION BY uc.CH_MATRICULA_UNIDADE,fat.DT_MESANO_REF order by fat.DT_MESANO_REF, fat.GBIINVOICE) > 1 
AND row_number() OVER(PARTITION BY uc.CH_MATRICULA_UNIDADE,fat.DT_MESANO_REF order by fat.DT_MESANO_REF, fat.GBIINVOICE DESC) = 1 

 AND ssf.status not in (3,7)
THEN 6 ELSE 1 END  as CH_TIPO_FATURA,
1 as CH_MOTIVO_SITUACAO_FATURA,
3 as CH_TIPO_EMISSAO_FATURA,
1 as CH_TIPO_DOCUMENTO_COBRANCA,
4 as CH_TIPO_ENTREGA_FATURA_COLETOR,
uc.ID_GRUPO_FATURAMENTO as ID_GRUPO_FATURAMENTO,
49 as ID_USUARIO,
-- null as ID_FECHAMENTOS,
uc.CH_MATRICULA_UNIDADE as CH_MATRICULA_UNIDADE,
14 as CH_REGRA_FATURAMENTO,
NULL as ID_CONTRATO_ALUGUEL,
cast(cast(case
    when fat.GBIDUE_DATE is null then dateadd(day,28,fat.GBIDATE)
    else fat.GBIDUE_DATE
end as datetime) as date) as DT_TOLERANCIA_VENCIMENTO,
0 as VL_TOTAL_LIXO,
-- CASE WHEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) < 0 THEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) * -1 ELSE COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) END as VL_BASE_JUROS_CORRECAO,
-- CASE WHEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) < 0 THEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) * -1 ELSE COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) END as VL_BASE_MULTA,
NULL as HIST_POSSUI_ISENCAO_TARIFA_LIXO,
-- coalesce(reg.GBIMPREV_READ,HIST.GBR$PREAD)
coalesce(CASE 
    WHEN CAST(reg.GBIMPREV_READ AS INTEGER) <> cast(LAG(reg.GBIMCURR_READ,1,GBIMPREV_READ) OVER (partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) as integer) 
    and row_number() OVER(partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) <> 1   THEN 
    LAG(reg.GBIMCURR_READ,1,GBIMCURR_READ)OVER (partition by reg.GBIMINSTALL order by reg.GBIINVOICE ASC) 
    else reg.GBIMPREV_READ end,HIST.GBR$PREAD)
    as HIST_NR_LEITURA_ANTERIOR_REAL,
reg.GBIMPREV_READ,
reg.GBIMCURR_READ,
P.VL_SALDO_ATUAL as  MIG_VL_SALDO_ATUAL_TEMP,
DT_MESANO_REF as MIG_DT_MESANO_REF_TEMP,
-- CASE WHEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) < 0 THEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) * -1 ELSE COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) END as VL_BASE_JUROS,
-- CASE WHEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) < 0 THEN COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) * -1 ELSE COALESCE(GBS.GBSCLOSEBAL/100,fat.GBITOT_DOLLAR/100) END as VL_BASE_CORRECAO
fat.GBICONSUMER as MIG_GBICONSUMER_TEMP,
fat.GBILEDGER as MIG_GBILEDGER_TEMP,
fat.GBISTATEMENT_NO AS MIG_GBISTATEMENT_NO_TEMP,
fat.GBIINVOICE AS MIG_GBIINVOICE_TEMP
FROM

{{ref('stage_faturas')}} fat
left join {{ref('stage_fatura_register')}} reg on cast(reg.GBIINVOICE as varchar) = cast(fat.GBIINVOICE as varchar)
left JOIN {{ref('stage_fatura_componente')}} c ON c.COD_FATURA = fat.GBIINVOICE
left JOIN {{ref('stage_fatura_gastos')}} gastos on gastos.GBIINVOICE = fat.GBIINVOICE
left join {{ref('cad_unidade_comercial')}} uc on cast(uc.CH_MATRICULA_UNIDADE as varchar) = cast(fat.GBIINSTALL as varchar)
left join {{ref('cad_unidade_ligacao_agua')}} la on cast(la.CH_MATRICULA_UNIDADE as varchar) = cast(uc.CH_MATRICULA_UNIDADE as varchar)
left join {{ref('tab_localizacao')}} loc on cast(loc.NU_LOCALIZACAO_COMPLETA as varchar) = cast(substring(uc.NR_LOCALIZACAO_UNIDADE,1,10) as varchar)
-- left join {{ref('stage_situacao_fatura')}} S ON S.GBIINVOICE = fat.GBIINVOICE
LEFT JOIN {{ref('stage_fatura_consumohist')}} CONSUMO_HIST ON CONSUMO_HIST.GBIINVOICE = fat.GBIINVOICE
LEFT JOIN {{ref('stage_fatura_fsu')}} FSU ON FSU.MIG_ID_FATURA_TEMP = fat.GBIINVOICE
LEFT JOIN {{ref('stage_ap')}} AP  ON AP.MIG_STATEMENT_TEMP_ADJ = fat.GBISTATEMENT_NO
LEFT JOIN {{ref('stage_payment')}} P ON cast(P.id_conta_corrente as varchar) = cast(fat.GBILEDGER as varchar)
LEFT JOIN {{ref('stage_fatura_reghist')}} HIST ON HIST.GBR$SEQNO = fat.GBIINVOICE
LEFT JOIN {{ref('cad_unidade_orgao_centralizador')}} CUOC ON CUOC.CH_MATRICULA_UNIDADE = uc.CH_MATRICULA_UNIDADE
left join {{ref('stage_fatura_status_pago')}} SFSP ON  fat.GBIINVOICE = SFSP.GBIINVOICE
left join {{ref('stage_status_fatura')}} ssf on ssf.GBIINVOICE = fat.GBIINVOICE
)

select fatura.*, 
(VL_TOTAL_AGUA+ VL_TOTAL_ESGOTO+VL_TOTAL_SERVICOS+VL_TOTAL_DESCONTOS) as VL_TOTAL_FATURA,
(VL_TOTAL_AGUA+ VL_TOTAL_ESGOTO+VL_TOTAL_SERVICOS+VL_TOTAL_DESCONTOS) as VL_BASE_JUROS_MULTA,
(VL_TOTAL_AGUA+ VL_TOTAL_ESGOTO+VL_TOTAL_SERVICOS+VL_TOTAL_DESCONTOS) as VL_BASE_JUROS_CORRECAO,
(VL_TOTAL_AGUA+ VL_TOTAL_ESGOTO+VL_TOTAL_SERVICOS+VL_TOTAL_DESCONTOS) as VL_BASE_MULTA,
(VL_TOTAL_AGUA+ VL_TOTAL_ESGOTO+VL_TOTAL_SERVICOS+VL_TOTAL_DESCONTOS) as VL_BASE_JUROS,
(VL_TOTAL_AGUA+ VL_TOTAL_ESGOTO+VL_TOTAL_SERVICOS+VL_TOTAL_DESCONTOS) as VL_BASE_CORRECAO,
(VL_TOTAL_AGUA+ VL_TOTAL_ESGOTO+VL_TOTAL_SERVICOS+VL_TOTAL_DESCONTOS) AS VL_TOTAL_BASE_IMPOSTO,
cf.ID_FECHAMENTOS AS ID_FECHAMENTOS,
cast(CASE WHEN DATEPART(HOUR,HIST_DATA_LEITURA_ANTERIOR_TEMP) = 23 THEN  DATEADD(HOUR,1,HIST_DATA_LEITURA_ANTERIOR_TEMP) 
            when DATEPART(HOUR,HIST_DATA_LEITURA_ANTERIOR_TEMP) = 13 THEN  DATEADD(HOUR,11,HIST_DATA_LEITURA_ANTERIOR_TEMP) 
            when DATEPART(HOUR,HIST_DATA_LEITURA_ANTERIOR_TEMP) = 12 THEN  DATEADD(HOUR,12,HIST_DATA_LEITURA_ANTERIOR_TEMP) 
            when DATEPART(HOUR,HIST_DATA_LEITURA_ANTERIOR_TEMP) = 11 THEN  DATEADD(HOUR,13,HIST_DATA_LEITURA_ANTERIOR_TEMP) 
ELSE HIST_DATA_LEITURA_ANTERIOR_TEMP END as date) AS HIST_DATA_LEITURA_ANTERIOR,

HIST_DATA_LEITURA_ATUAL_TEMP AS HIST_DATA_LEITURA_ATUAL,

NR_FATURA AS MIG_PK_TEMP
from fatura
LEFT JOIN {{ref('cad_fechamentos')}} cf on cf.MES_REFERENCIA = DT_MESANO_REF and cf.CH_PROCESSO =3
-- WHERE DT_SITUACAO_FATURA <= '2022-11-01'
